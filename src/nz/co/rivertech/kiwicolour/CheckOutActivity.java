package nz.co.rivertech.kiwicolour;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import org.apache.http.NameValuePair;import org.apache.http.message.BasicNameValuePair;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import android.app.Activity;import android.app.AlertDialog;import android.app.Dialog;import android.app.ProgressDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.graphics.Color;import android.os.AsyncTask;import android.os.Bundle;import android.text.Html;import android.text.format.DateFormat;import android.text.format.Time;import android.util.Log;import android.view.ContextMenu;import android.view.ContextMenu.ContextMenuInfo;import android.view.Gravity;import android.view.MenuInflater;import android.view.MenuItem;import android.view.MotionEvent;import android.view.View;import android.view.View.OnClickListener;import android.view.View.OnTouchListener;import android.view.ViewGroup.LayoutParams;import android.widget.AdapterView;import android.widget.AdapterView.OnItemLongClickListener;import android.widget.Button;import android.widget.DatePicker;import android.widget.EditText;import android.widget.ImageView;import android.widget.ListAdapter;import android.widget.ListView;import android.widget.RadioButton;import android.widget.RelativeLayout;import android.widget.SimpleAdapter;import android.widget.TextView;import android.widget.TimePicker;import android.widget.Toast;public class CheckOutActivity extends Activity {	TextView tvShopNameCheckout;	RelativeLayout LayoutShippingOpt,LayoutToBeReady;	private ProgressDialog pDialog;	JSONParser jParser = new JSONParser();	private static String url_get_items_list = "http://rivertech.co.nz/kiwicolour/androidphp/get_items_list.php";	private static String url_sent_to_paintshop = "http://rivertech.co.nz/kiwicolour/androidphp/final_order_update.php";	private static String url_delete_item = "http://rivertech.co.nz/kiwicolour/androidphp/delete_item.php";	private static String url_delete_order = "http://rivertech.co.nz/kiwicolour/androidphp/delete_order.php";	JSONArray AllMyOrderItems = null;	private static final String TAG_SUCCESS = "success";	private static final String TAG_ITEMS = "Items";	private static final String TAG_ITEM_ID = "item_id";	private static final String TAG_ITEM_DESC = "item_desc";	private static final String TAG_ORDER_ID = "order_id";	private ListAdapter adapter = null;	ArrayList<HashMap<String, String>> MyOrderItemList;	String GetExtraOrderID, GetExtraStatus, GetExtraShopName, GetExtraShopID,			GetExtraDateTime, GetExtraAddress, strReadyBefore, strNow,			strItemId;	String GlobalShipping, GlobalAddress;	DatePicker datePicker;	TimePicker timePicker;	ListView listvieworderitems;	RadioButton rbPickup, rbDeliverTo;	EditText etAdress;	ImageView imgBacktoChoosePaint, imgLogo;	Button btnCancel, btnDone, btnSend, btnsetDateTime, btnCancelDateTime,			btnNow, btnComments, btnShipping, btnSetTime;	RelativeLayout linearAdress;	RadioButton rbNow, rbBefore;	// , tvShippingOptionButton	TextView tvStatus, tvShipping, tvDeliverTo, tvTime, tvDate, tvOrderId,			tvTobeReady, tvNotEditable;	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.checkout_activity);		imgLogo = (ImageView) findViewById(R.id.imgLogo);		tvDeliverTo = (TextView) findViewById(R.id.tvDeliverTo);		tvOrderId = (TextView) findViewById(R.id.tvOrderId);		tvStatus = (TextView) findViewById(R.id.tvStatus);		tvShopNameCheckout = (TextView) findViewById(R.id.tvShopNameCheckout);				LayoutShippingOpt = (RelativeLayout) findViewById(R.id.LayoutShippingOpt);		LayoutToBeReady = (RelativeLayout) findViewById(R.id.LayoutToBeReady);				GetExtraOrderID = getIntent().getExtras().getString("OrderID");		GetExtraShopName = getIntent().getExtras().getString("ShopName");		GetExtraStatus = getIntent().getExtras().getString("Status");		Log.e("GetExtraOrderID", GetExtraOrderID);		Log.e("GetExtraShopName", GetExtraShopName);		Log.e("GetExtraStatus", GetExtraStatus);		imgBacktoChoosePaint = (ImageView) findViewById(R.id.imgAddmore);		btnShipping = (Button) findViewById(R.id.btnShipping);		btnSetTime = (Button) findViewById(R.id.btnTime);			if (Global.globalVariable == "ARCHIVE"				|| Global.globalVariable == "HOME") {			if (!GetExtraStatus.equals("Draft")) {				GetExtraAddress = getIntent().getExtras().getString("Address");				GetExtraDateTime = getIntent().getExtras()						.getString("DateTime");				Log.e("dakhele Global.globalVariable == ARCHIVE", "xxx");			}		}		btnComments = (Button) findViewById(R.id.btnComments);		btnComments.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				Boolean internetIsPresent = null;				try {					ConnectionDetector cd = new ConnectionDetector(							getApplicationContext());					internetIsPresent = cd.isConnectingToInternet();				} catch (Exception e) {					// TODO Auto-generated catch block					e.printStackTrace();				}				if (internetIsPresent) {					Toast.makeText(CheckOutActivity.this,							"Loading comments...", Toast.LENGTH_SHORT).show();					Intent in = new Intent(CheckOutActivity.this,							OrderCommentsActivity.class);					in.putExtra("ORDER_ID", GetExtraOrderID);					Global.globalVariable = "CHECKOUT";					startActivity(in);					Log.e("khate akhare", "clicke dokmeie comment");					overridePendingTransition(R.anim.push_left_in,							R.anim.push_up_out);				} else {					Toast.makeText(getApplicationContext(), "Connection Lost!",							Toast.LENGTH_LONG).show();				}			}		});		listvieworderitems = (ListView) findViewById(R.id.listViewOrderItems);		registerForContextMenu(listvieworderitems);		MyOrderItemList = new ArrayList<HashMap<String, String>>();		listvieworderitems.setLongClickable(true);		listvieworderitems				.setOnItemLongClickListener(new OnItemLongClickListener() {					@Override					public boolean onItemLongClick(AdapterView<?> parent,							View view, int position, long id) {						TextView tvItemId = ((TextView) view								.findViewById(R.id.tvorderItemId));						strItemId = tvItemId.getText().toString();						return false;					}				});		setTitle("Checkout");		tvShopNameCheckout.setText(GetExtraShopName);		tvTime = (TextView) findViewById(R.id.tvTime);		tvDate = (TextView) findViewById(R.id.tvDate);		tvShipping = (TextView) findViewById(R.id.tvShipping);		tvNotEditable = (TextView) findViewById(R.id.tvNotEditable);		// tvShippingOptionButton = (TextView)		// findViewById(R.id.btnShippingOptions);//		tvTobeReady = (TextView) findViewById(R.id.btnSetTime);		// btnBackToChoosePaint = (Button)		// findViewById(R.id.btnBacktoChoosePaint);//		tvTobeReady.setText(Html//				.fromHtml("<u>Tap here to select date &amp; time...</u>"));		// tvShippingOptionButton.setText(Html.fromHtml("<u>Tap here to select shipping options...</u>"));		// ***************** Badan on touch ro rah mindazim		// **************************		// tvShippingOptionButton.setOnTouchListener(new OnTouchListener() {		//		// @Override		// public boolean onTouch(View v, MotionEvent event) {		// switch(event.getAction()){		// case MotionEvent.ACTION_DOWN:		// tvShippingOptionButton.setTextColor(Color.YELLOW);		// break;		// case MotionEvent.ACTION_MOVE:		// // touch move code		// break;		// case MotionEvent.ACTION_UP:		// tvShippingOptionButton.setTextColor(Color.rgb(204, 91, 16));		// break;		// }		// return false;		// }		// });		// tvTobeReady.setOnTouchListener(new OnTouchListener() {		//		// @Override		// public boolean onTouch(View v, MotionEvent event) {		// switch(event.getAction()){		// case MotionEvent.ACTION_DOWN:		// tvTobeReady.setTextColor(Color.YELLOW);		// break;		// case MotionEvent.ACTION_MOVE:		// // touch move code		// break;		// case MotionEvent.ACTION_UP:		// tvTobeReady.setTextColor(Color.rgb(204, 91, 16));		// break;		// }		// return false;		// }		// });		imgBacktoChoosePaint.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				// finish();				Boolean internetIsPresent = null;				try {					ConnectionDetector cd = new ConnectionDetector(							getApplicationContext());					internetIsPresent = cd.isConnectingToInternet();				} catch (Exception e) {					// TODO Auto-generated catch block					e.printStackTrace();				}				if (internetIsPresent) {					Global.globalVariable = "CHECKOUT";					Intent in = new Intent(CheckOutActivity.this,							ChoosePaintActivity.class);					in.putExtra("ACTIVITY", "CHECKOUT");					in.putExtra("OrderID", GetExtraOrderID);					in.putExtra("ItemNum",							String.valueOf(listvieworderitems.getCount()));					in.putExtra("ShopName", GetExtraShopName);					Global.CheckoutAddress = tvShipping.getText().toString();					Global.CheckoutDate = tvDate.getText().toString();					Global.CheckoutTime = tvTime.getText().toString();					// in.putExtra("ShopID", GetExtraShopID);					// in.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);					// in.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP |					// Intent.FLAG_ACTIVITY_SINGLE_TOP);					startActivity(in);					overridePendingTransition(R.anim.push_left_in,							R.anim.push_up_out);				} else {					Toast.makeText(getApplicationContext(), "Connection Lost!",							Toast.LENGTH_LONG).show();				}			}		});		btnSetTime.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				final Dialog d = new Dialog(CheckOutActivity.this);				d.setTitle("To be ready before:");				d.setContentView(R.layout.date_time_dialog);				datePicker = (DatePicker) d.findViewById(R.id.datePicker1);				timePicker = (TimePicker) d.findViewById(R.id.timePicker1);				btnCancelDateTime = (Button) d						.findViewById(R.id.btnCloseDateTimeDialog);				btnsetDateTime = (Button) d.findViewById(R.id.btnSetDateTime);				btnNow = (Button) d.findViewById(R.id.btnNow);				d.show();				btnNow.setOnClickListener(new OnClickListener() {					@Override					public void onClick(View v) {						Date dt = new Date();						CharSequence hour = DateFormat.format("kk",								dt.getTime());						CharSequence minute = DateFormat.format("mm",								dt.getTime());						CharSequence year = DateFormat.format("yyyy",								dt.getTime());						CharSequence month = DateFormat.format("MM",								dt.getTime());						CharSequence day = DateFormat.format("dd", dt.getTime());						datePicker.updateDate(Integer.parseInt((String) year),								Integer.parseInt((String) month) - 1,								Integer.parseInt((String) day));						timePicker.setCurrentHour(Integer								.parseInt((String) hour));						timePicker.setCurrentMinute(Integer								.parseInt((String) minute));						strReadyBefore = "";					}				});				btnCancelDateTime.setOnClickListener(new OnClickListener() {					@Override					public void onClick(View v) {						d.dismiss();					}				});				btnsetDateTime.setOnClickListener(new OnClickListener() {					@Override					public void onClick(View v) {						// bayad meghdar e date va time ro bargardanim be tvDate						// va tvTime						Date dtnew = new Date(datePicker.getYear() - 1900,								datePicker.getMonth(), datePicker										.getDayOfMonth());						CharSequence BeforeDate = DateFormat.format(								"E dd MMM yyyy", dtnew);// ("E d MMMM ", dtnew);						String strDate = (String) DateFormat.format(								"yyyy-MM-dd", dtnew);						// ***************** Tarikhe zamane gozashte Handle						// shavad *****************						Time tnew = new Time();						tnew.hour = timePicker.getCurrentHour();						tnew.minute = timePicker.getCurrentMinute();						String strt = String.valueOf(tnew.minute);						String strh = String.valueOf(tnew.hour);						int newminute = Integer.valueOf(strt);						int newhour = Integer.valueOf(strh);						int newday = Integer.valueOf((String) DateFormat								.format("dd", dtnew));						int newmonth = Integer.valueOf((String) DateFormat								.format("MM", dtnew));						int newyear = Integer.valueOf((String) DateFormat								.format("yyyy", dtnew));						if (DateTimeValidation(newminute, newhour, newday,								newmonth, newyear)) {							tvDate.setText(BeforeDate);							if (strh.length() <= 1) {								strh = "0" + strh;							}							if (strt.length() <= 1) {								strt = "0" + strt;							}							Log.e("strt", strt);							Log.e("strh", strh);							tvTime.setText(strh + ":" + strt);							String strTime = strh + ":" + strt + ":00";							strReadyBefore = strDate + " " + strTime; // saakhtare																		// sahihe																		// ersaal																		// e																		// datetime																		// be																		// mysql							// Toast.makeText(getApplicationContext(),							// strReadyBefore, Toast.LENGTH_LONG).show();							strNow = "";							d.dismiss();							LayoutToBeReady.setVisibility(View.VISIBLE);						} else {							Toast ts = Toast.makeText(getApplicationContext(),									"Invalid date/time !", Toast.LENGTH_SHORT);							ts.setGravity(Gravity.CENTER, 0, 0);							ts.show();						}					}					private boolean DateTimeValidation(int newminute,							int newhour, int newday, int newmonth, int newyear) {						Date newdt = new Date();						CharSequence hour = DateFormat.format("kk",								newdt.getTime());						CharSequence minute = DateFormat.format("mm",								newdt.getTime());						CharSequence year = DateFormat.format("yyyy",								newdt.getTime());						CharSequence month = DateFormat.format("MM",								newdt.getTime());						CharSequence day = DateFormat.format("dd",								newdt.getTime());						if (Integer.valueOf((String) year) < newyear) {							return true;						} else if (Integer.valueOf((String) year) > newyear) {							return false;						} else if (Integer.valueOf((String) year) == newyear) {							if (Integer.valueOf((String) month) < newmonth) {								return true;							} else if (Integer.valueOf((String) month) > newmonth) {								return false;							} else if (Integer.valueOf((String) month) == newmonth) {								if (Integer.valueOf((String) day) < newday) {									return true;								} else if (Integer.valueOf((String) day) > newday) {									return false;								} else if (Integer.valueOf((String) day) == newday) {									if (Integer.valueOf((String) hour) < newhour) {										return true;									} else if (Integer.valueOf((String) hour) > newhour) {										return false;									} else if (Integer.valueOf((String) hour) == newhour) {										if (Integer.valueOf((String) minute) <= newminute) {											return true;										} else if (Integer												.valueOf((String) minute) > newminute) {											return false;										}									}								}							}						}						return false;					}				});			}		});		btnShipping.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				Boolean internetIsPresent = null;				try {					ConnectionDetector cd = new ConnectionDetector(							getApplicationContext());					internetIsPresent = cd.isConnectingToInternet();				} catch (Exception e) {					// TODO Auto-generated catch block					e.printStackTrace();				}				if (internetIsPresent) {					GlobalShipping = tvShipping.getText().toString();					GlobalAddress = tvDeliverTo.getText().toString();					final Dialog dialog = new Dialog(CheckOutActivity.this);					dialog.setTitle("Shipping Options");					dialog.setContentView(R.layout.shipping_activity);					// initialize all widgets					rbPickup = (RadioButton) dialog							.findViewById(R.id.rbIntentToPickUpShippingOption);					rbDeliverTo = (RadioButton) dialog							.findViewById(R.id.rbDeliverToShippingOption);					etAdress = (EditText) dialog							.findViewById(R.id.etDeliveryAddressShippingOption);					btnCancel = (Button) dialog.findViewById(R.id.btnCancel);					btnDone = (Button) dialog.findViewById(R.id.btnDone);					linearAdress = (RelativeLayout) dialog							.findViewById(R.id.linearAdressOk);					linearAdress.setVisibility(View.GONE);					if (GlobalAddress != "Pick up") {						linearAdress.setVisibility(View.VISIBLE);						etAdress.setText(GlobalAddress);						rbDeliverTo.setChecked(true);						etAdress.setFocusable(true);						etAdress.requestFocus();					}else if(GlobalAddress == "Pick up"){						rbPickup.setChecked(true);					}					btnCancel.setOnClickListener(new OnClickListener() {						@Override						public void onClick(View v) {							tvShipping.setText(GlobalShipping);							tvDeliverTo.setText(GlobalAddress);							dialog.dismiss();						}					});					btnDone.setOnClickListener(new OnClickListener() {						@Override						public void onClick(View v) {							if (etAdress.getText().toString().equals("")									&& rbDeliverTo.isChecked()) {								Toast.makeText(getApplicationContext(),										"Please type delivery address!",										Toast.LENGTH_LONG).show();							} else if (!etAdress.getText().toString()									.equals("")									&& rbDeliverTo.isChecked()) {								LayoutShippingOpt.setVisibility(View.VISIBLE);								tvDeliverTo.setText(etAdress.getText()										.toString());								tvShipping.setText("Shipping: ");								dialog.dismiss();							} else if (rbPickup.isChecked()) {								LayoutShippingOpt.setVisibility(View.VISIBLE);								tvShipping.setText("Shipping: ");								tvDeliverTo.setText("Pick up");								dialog.dismiss();							}						}					});					rbPickup.setOnClickListener(new OnClickListener() {						@Override						public void onClick(View v) {							linearAdress.setVisibility(View.GONE);							tvShipping.setText("Shipping: ");							tvDeliverTo.setText("Pick up");							etAdress.setText("");						}					});					rbDeliverTo.setOnClickListener(new OnClickListener() {						@Override						public void onClick(View v) {							linearAdress.setVisibility(View.VISIBLE);							tvShipping.setText("Shipping: ");						}					});					dialog.show();				} else {					Toast.makeText(getApplicationContext(), "Connection Lost!",							Toast.LENGTH_LONG).show();				}			}// end of onclick		});		btnSend = (Button) findViewById(R.id.btnSendToPaintShop);		btnSend.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				Boolean internetIsPresent = null;				try {					ConnectionDetector cd = new ConnectionDetector(							getApplicationContext());					internetIsPresent = cd.isConnectingToInternet();				} catch (Exception e) {					// TODO Auto-generated catch block					e.printStackTrace();				}				if (internetIsPresent) {					if (tvShipping.getText().equals("")) {						Toast.makeText(getApplicationContext(),								"Shipping options not selected !",								Toast.LENGTH_SHORT).show();					} else if (tvDate.getText().equals("")) {						Toast.makeText(getApplicationContext(),								"Date and time not selected !",								Toast.LENGTH_SHORT).show();					} else if (listvieworderitems.getCount() == 0) {						Toast.makeText(								getApplicationContext(),								"Shopping Cart is empty!\nClick on 'Add More...' to choose paint.",								Toast.LENGTH_LONG).show();					} else {						new SentToPaintShop().execute();					}				} else {					Toast.makeText(getApplicationContext(), "Connection Lost!",							Toast.LENGTH_LONG).show();				}			}// end of onclick		});		GlobalShipping = "Deliver To:";		GlobalAddress = "";		tvOrderId.setText(GetExtraOrderID);		if (Global.globalVariable == "ARCHIVE"				&& !GetExtraStatus.equals("Draft")) {			if (!GetExtraAddress.contains("Pick up")) {				tvShipping.setText("Deliver To:");			}			tvDeliverTo.setText(GetExtraAddress);			String[] parts = GetExtraDateTime.split(" ");			String strDT = parts[1] + " " + parts[2] + ":00";			Date date = null;			try {				date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(strDT);				strDT = new SimpleDateFormat("E dd MMM yyyy").format(date);			} catch (ParseException e) {				e.printStackTrace();			}			Log.e("strDT", strDT);			tvDate.setText(strDT);// parts[0]			tvTime.setText(parts[2]);			tvStatus.setText(GetExtraStatus);		}		if (Global.globalVariable == "HOME" && !GetExtraStatus.equals("Draft")) {			if (!GetExtraAddress.contains("Pick up")) {				tvShipping.setText("Deliver To:");			}			tvDeliverTo.setText(GetExtraAddress);			String[] parts = GetExtraDateTime.split(" ");			String strDT = parts[1] + " " + parts[2] + ":00";			Date date = null;			try {				date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(strDT);				strDT = new SimpleDateFormat("E dd MMM yyyy").format(date);			} catch (ParseException e) {				e.printStackTrace();			}			Log.e("strDT", strDT);			tvDate.setText(strDT);// parts[0]			tvTime.setText(parts[2]);			tvStatus.setText(GetExtraStatus);		}		new LoadAllMyOrderItems().execute();		if (!tvStatus.getText().equals("Draft")) {			LOCK();		} else {			UNLOCK();		}		if (tvStatus.getText().equals("Draft")) {			imgLogo.setBackgroundResource(R.drawable.state1);		} else if (tvStatus.getText().equals("Sent")) {			imgLogo.setBackgroundResource(R.drawable.state2);		} else if (tvStatus.getText().equals("Received")) {			imgLogo.setBackgroundResource(R.drawable.state3);		} else if (tvStatus.getText().equals("Accepted")) {			imgLogo.setBackgroundResource(R.drawable.state4);		} else if (tvStatus.getText().equals("Canceled")) {			imgLogo.setBackgroundResource(R.drawable.state5);		} else if (tvStatus.getText().equals("In Process")) {			imgLogo.setBackgroundResource(R.drawable.state6);		} else if (tvStatus.getText().equals("Ready")) {			imgLogo.setBackgroundResource(R.drawable.state7);		} else if (tvStatus.getText().equals("Shipped")) {			imgLogo.setBackgroundResource(R.drawable.state8);		}	}	private void UNLOCK() {		btnShipping.setVisibility(View.VISIBLE);		btnSetTime.setVisibility(View.VISIBLE);		imgBacktoChoosePaint.setVisibility(View.VISIBLE);		// btnComments.setVisibility(View.VISIBLE);		btnSend.setVisibility(View.VISIBLE);		// text view for Not Editable mode		tvNotEditable.setText("Not Sent!");		tvNotEditable.setVisibility(View.VISIBLE);	}	private void LOCK() {		btnShipping.setVisibility(View.GONE);		btnSetTime.setVisibility(View.GONE);		imgBacktoChoosePaint.setVisibility(View.GONE);		// fill_parent comment button		LayoutParams lp = btnComments.getLayoutParams();		lp.width = LayoutParams.FILL_PARENT;		btnSend.setVisibility(View.INVISIBLE);		// text view for Not Editable mode		tvNotEditable.setText("Not editable!");		tvNotEditable.setVisibility(View.VISIBLE);	}	@Override	public boolean onContextItemSelected(MenuItem item) {		// dastoore marboot be delete shodan e item az listview dar inja gharar		// migirad		new deleteItem().execute();		return super.onContextItemSelected(item);	}	@Override	public void onCreateContextMenu(ContextMenu menu, View v,			ContextMenuInfo menuInfo) {		super.onCreateContextMenu(menu, v, menuInfo);		if (tvStatus.getText().equals("Draft")) {			MenuInflater inflater = getMenuInflater();			inflater.inflate(R.menu.mnudelete, menu);		}	}	// code e asynctask marboot be load shodane listview	class LoadAllMyOrderItems extends AsyncTask<String, String, String> {		/**		 * Before starting background thread Show Progress Dialog		 * */		@Override		protected void onPreExecute() {			super.onPreExecute();			pDialog = new ProgressDialog(CheckOutActivity.this);			pDialog.setMessage("Loading your Order items. Please wait...");			pDialog.setIndeterminate(false);			pDialog.setCancelable(false);			pDialog.show();		}		/**		 * getting my orders from url		 * */		protected String doInBackground(String... args) {			// Building Parameters			List<NameValuePair> params = new ArrayList<NameValuePair>();			params.add(new BasicNameValuePair("order_id", tvOrderId.getText()					.toString()));			// getting JSON string from URL			JSONObject json = jParser.makeHttpRequest(url_get_items_list,					"GET", params);			if (json == null) {				try {					throw new JSONException("INVALID");				} catch (JSONException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}			}			// Check your log cat for JSON reponse			Log.d("All My order items: ", json.toString());			try {				// Checking for SUCCESS TAG				int success = json.getInt(TAG_SUCCESS);				if (success == 1) {					// item/s found					// Getting Array of itemorders					AllMyOrderItems = json.getJSONArray(TAG_ITEMS);					Log.e("ALL My ORDER ITEMS",							String.valueOf(AllMyOrderItems.length()));					MyOrderItemList.clear();					// looping through All Products					for (int i = 0; i < AllMyOrderItems.length(); i++) {						JSONObject c = AllMyOrderItems.getJSONObject(i);						// Storing each json item in variable						String ItemId = c.getString(TAG_ITEM_ID);						String ItemName = c.getString(TAG_ITEM_DESC);						// creating new HashMap						HashMap<String, String> map = new HashMap<String, String>();						// adding each child node to HashMap key => value						map.put(TAG_ITEM_ID, ItemId);						map.put(TAG_ITEM_DESC, ItemName);						// adding HashList to ArrayList						MyOrderItemList.add(map);					}				} else {					// if(listvieworderitems.getCount()==0){					Log.e("SHOW ALERT DIALOG =======",							String.valueOf(listvieworderitems.getCount()));					MyOrderItemList.clear();					runOnUiThread(new Runnable() {						public void run() {							showAlertDialog(CheckOutActivity.this,									"Delete order",									"Shopping cart is empty! Do you want to delete order #"											+ GetExtraOrderID + " ?", false);						}					});					// }				}			} catch (JSONException e) {				e.printStackTrace();				pDialog.dismiss();				Toast.makeText(getApplicationContext(), "Something is wrong",						Toast.LENGTH_LONG).show();				return "0";			}			return "1";		}		/**		 * After completing background task Dismiss the progress dialog		 * **/		protected void onPostExecute(String file_url) {			// dismiss the dialog after getting all products			pDialog.dismiss();			// updating UI from Background Thread			if (file_url.equals("1")) {				runOnUiThread(new Runnable() {					public void run() {						/**						 * Updating parsed JSON data into ListView						 * */						adapter = new SimpleAdapter(getApplicationContext(),								MyOrderItemList, R.layout.list_row_order_items,								new String[] { TAG_ITEM_ID, TAG_ITEM_DESC },								new int[] { R.id.tvorderItemId,										R.id.tvOrderDescription });						// updating listview						listvieworderitems.setAdapter(adapter);					}				});			}		}	}// payan e asynctask	// code e marboot be ersaal e etelaat be paintshop	class SentToPaintShop extends AsyncTask<String, String, String> {		@Override		protected void onPreExecute() {			super.onPreExecute();			pDialog = new ProgressDialog(CheckOutActivity.this);			pDialog.setMessage("Sending your order items to paintshop.\nPlease wait...");			pDialog.setIndeterminate(false);			pDialog.setCancelable(false);			pDialog.show();		}		@Override		protected String doInBackground(String... params) {			List<NameValuePair> params1 = new ArrayList<NameValuePair>();			params1.add(new BasicNameValuePair("order_id", tvOrderId.getText()					.toString()));			// dar soorate lozoom format e tarikh ra baraye ersal avaz mikonim			Date dt = new Date();			String strDate = (String) DateFormat.format("yyyy-MM-dd k:mm:ss",					dt.getTime());			params1.add(new BasicNameValuePair("insert_date", strDate));			// moshakhas konandeye noe ersal			if (!tvDeliverTo.getText().toString().equals("")) {				params1.add(new BasicNameValuePair("delivery_address",						tvDeliverTo.getText().toString()));			} else {				params1.add(new BasicNameValuePair("delivery_address",						tvShipping.getText().toString()));			}			if (strReadyBefore.equals("")) {				params1.add(new BasicNameValuePair("ready_datetime", strNow));			} else {				params1.add(new BasicNameValuePair("ready_datetime",						strReadyBefore));			}			// getting JSON string from URL			JSONObject json1 = jParser.makeHttpRequest(url_sent_to_paintshop,					"GET", params1);			// Check your log cat for JSON reponse			Log.d("Update status: ", json1.toString());			try {				// Checking for SUCCESS TAG				int success = json1.getInt(TAG_SUCCESS);				if (success == 1) {					// Sent to paintshop successfully					runOnUiThread(new Runnable() {						public void run() {							Toast.makeText(getApplicationContext(),									"Order successfully sent to paintshop.",									Toast.LENGTH_LONG).show();							finish();							Global.globalVariable = "CHECKOUT";							Intent in = new Intent(getApplicationContext(),									HomeActivity.class);							in.putExtra("ACTIVITY", "CHECKOUT");							// in.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);							in.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP									| Intent.FLAG_ACTIVITY_SINGLE_TOP);							startActivity(in);							overridePendingTransition(R.anim.push_left_in,									R.anim.push_up_out);						}					});					// close activity va bazgasht be home activity (ghesmate my					// order dar activity home update mishavad)					Log.e("success", "1");				} else {					Log.e("unsuccess", "0");				}			} catch (JSONException e) {				e.printStackTrace();			}			return null;		}		@Override		protected void onPostExecute(String result) {			super.onPostExecute(result);			pDialog.dismiss();		}	}	class deleteItem extends AsyncTask<String, String, String> {		@Override		protected void onPreExecute() {			super.onPreExecute();			pDialog = new ProgressDialog(CheckOutActivity.this);			pDialog.setMessage("Deleting your item. Please wait...");			pDialog.setIndeterminate(false);			pDialog.setCancelable(false);			pDialog.show();		}		@Override		protected String doInBackground(String... params) {			try {				List<NameValuePair> params2 = new ArrayList<NameValuePair>();				params2.add(new BasicNameValuePair(TAG_ITEM_ID, strItemId));				// getting JSON string from URL				JSONObject json = jParser.makeHttpRequest(url_delete_item,						"GET", params2);				// Check your log cat for JSON reponse				Log.d("deleted item: ", json.toString());				// Checking for SUCCESS TAG				int success = json.getInt(TAG_SUCCESS);				if (success == 1) {					// item deleted successfully					runOnUiThread(new Runnable() {						public void run() {							Toast.makeText(getApplicationContext(),									"Item deleted !", Toast.LENGTH_SHORT)									.show();						}					});				}			} catch (JSONException e) {				e.printStackTrace();			}			return null;		}		@Override		protected void onPostExecute(String result) {			super.onPostExecute(result);			pDialog.dismiss();			new LoadAllMyOrderItems().execute();		}	}	// delete order	class deleteOrder extends AsyncTask<String, String, String> {		@Override		protected void onPreExecute() {			super.onPreExecute();			pDialog = new ProgressDialog(CheckOutActivity.this);			pDialog.setMessage("Deleting your order. Please wait...");			pDialog.setIndeterminate(false);			pDialog.setCancelable(false);			pDialog.show();		}		@Override		protected String doInBackground(String... params) {			try {				List<NameValuePair> params2 = new ArrayList<NameValuePair>();				params2.add(new BasicNameValuePair(TAG_ORDER_ID,						GetExtraOrderID));				// getting JSON string from URL				JSONObject json = jParser.makeHttpRequest(url_delete_order,						"GET", params2);				// Check your log cat for JSON reponse				Log.d("deleted order: ", json.toString());				// Checking for SUCCESS TAG				int success = json.getInt(TAG_SUCCESS);				if (success == 1) {					// order deleted successfully					// finish();					// Home baaz shavad++++++++++++++++++++++					Toast.makeText(CheckOutActivity.this,							"Order has been deleted!", Toast.LENGTH_LONG)							.show();					runOnUiThread(new Runnable() {						public void run() {						}					});				}			} catch (JSONException e) {				e.printStackTrace();			}			return null;		}		@Override		protected void onPostExecute(String result) {			super.onPostExecute(result);			pDialog.dismiss();		}	} // end of deleteOrder class	@SuppressWarnings("deprecation")	public void showAlertDialog(Context context, String title, String message,			Boolean status) {		AlertDialog.Builder builder = new AlertDialog.Builder(context);		builder.setTitle(title);		builder.setMessage(message);		builder.setPositiveButton("YES", new DialogInterface.OnClickListener() {			public void onClick(DialogInterface dialog, int which) {				dialog.dismiss();				new deleteOrder().execute();				Global.globalVariable = "CHECKOUT";				Intent in = new Intent(CheckOutActivity.this,						HomeActivity.class);				// in.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP |				// Intent.FLAG_ACTIVITY_SINGLE_TOP);				// finish();				in.putExtra("ACTIVITY", "CHECKOUT");				startActivity(in);				overridePendingTransition(R.anim.push_left_in,						R.anim.push_up_out);			}		});		builder.setNegativeButton("NO", new DialogInterface.OnClickListener() {			@Override			public void onClick(DialogInterface dialog, int which) {				// Do nothing				dialog.dismiss();			}		});		AlertDialog alert = builder.create();		alert.show();	};	@Override	protected void onResume() {		super.onResume();		if (!(Global.CheckoutAddress.length() == 0)) {			tvShipping.setText(Global.CheckoutAddress);		}		if (!(Global.CheckoutDate.length() == 0)) {			tvDate.setText(Global.CheckoutDate);		}		if (!(Global.CheckoutTime.length() == 0)) {			tvTime.setText(Global.CheckoutTime);		}		Global.CheckoutAddress = "";		Global.CheckoutDate = "";		Global.CheckoutTime = "";	}}// end class
package nz.co.rivertech.kiwicolour;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Timer;import java.util.TimerTask;import org.apache.http.NameValuePair;import org.apache.http.message.BasicNameValuePair;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import android.app.Activity;import android.app.AlertDialog;import android.content.Context;import android.content.DialogInterface;import android.os.AsyncTask;import android.os.Bundle;import android.os.Handler;import android.text.format.DateFormat;import android.util.Log;import android.view.View;import android.view.View.OnClickListener;import android.widget.BaseAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.ListAdapter;import android.widget.ListView;import android.widget.ProgressBar;import android.widget.SimpleAdapter;import android.widget.TextView;import android.widget.Toast;public class OrderCommentsActivity extends Activity implements OnClickListener {	Boolean boolRun;	TimerTask timerTask;	Button btnSendComment;	ListView listViewComment;	EditText etSendComment;	String strOrderId = "";	TextView tvComment;	ProgressBar ProgressBarLoadComments,ProgressBarLoadAllComments;	ImageView imgLoadComments;		JSONParser jParser = new JSONParser();	// HashMap<String, String> mapG;	private static String url_get_order_comments = "http://rivertech.co.nz/kiwicolour/androidphp/get_order_comments.php";	private static String url_add_comment = "http://rivertech.co.nz/kiwicolour/androidphp/add_comment.php";	private static String url_seen_comment = "http://rivertech.co.nz/kiwicolour/androidphp/seen_comment.php";	JSONArray AllOrderComments = null;	private static final String TAG_SUCCESS = "success";	private static final String TAG_ALL_COMMENTS = "AllComments";	private static final String TAG_COMMENT_ID = "CommentID";	private static final String TAG_SHOP = "ShopName";	private static final String TAG_PAINTER = "PainterName";	private static final String TAG_COMMENT = "Comment";	private static final String TAG_DATETIME = "DateTime";	private static final String TAG_SEEN = "Seen";	private ListAdapter adapter = null;	ArrayList<HashMap<String, String>> AllCommentsList;	// ArrayList<HashMap<String, String>> SingleCommentList;	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.order_comments_activity);		imgLoadComments = (ImageView) findViewById(R.id.imgRetryLoadComment);		ProgressBarLoadComments = (ProgressBar) findViewById(R.id.progressBarLoadComments);		ProgressBarLoadAllComments = (ProgressBar) findViewById(R.id.ProgressBarLoadAllComments);		imgLoadComments.setOnClickListener(this);				AllCommentsList = new ArrayList<HashMap<String, String>>();		// SingleCommentList = new ArrayList<HashMap<String, String>>();		tvComment = (TextView) findViewById(R.id.tvComment);		etSendComment = (EditText) findViewById(R.id.etSendComment);		btnSendComment = (Button) findViewById(R.id.btnSendComment);		btnSendComment.setOnClickListener(this);		listViewComment = (ListView) findViewById(R.id.listViewComments);		setTitle("Comments");		// btnSendComment.setEnabled(false);		// Log.e("Create", "bad az init");		// etSendComment.addTextChangedListener(new TextWatcher() {		// public void onTextChanged(CharSequence s, int start, int before,		// int count) {		// if(s.length() == 0)		// {btnSendComment.setEnabled(false);}		// else		// {btnSendComment.setEnabled(true);}		// }		// public void beforeTextChanged(CharSequence s, int start, int count,		// int after) { }		// public void afterTextChanged(Editable s) { }		// });		if (Global.globalVariable == "CHECKOUT") {			strOrderId = getIntent().getExtras().getString("ORDER_ID");		}		Global.globalVariable = "COMMENT";		// Load all comments for this order		// new LoadAllComments().execute();		// doAsyncTaskPeriodically();	}	class LoadAllComments extends AsyncTask<String, String, String> {		@Override		protected void onPreExecute() {			super.onPreExecute();			boolRun = false; // Lock shodane asynctask ta payane amaliat//			ProgressBarLoadAllComments.setVisibility(View.INVISIBLE);//			imgLoadComments.setVisibility(View.INVISIBLE);		}		@Override		protected String doInBackground(String... params) {			// Log.e("khate avval", "do in back ground");			List<NameValuePair> params1 = new ArrayList<NameValuePair>();			params1.add(new BasicNameValuePair("order_id", strOrderId));			// getting JSON string from URL			JSONObject json = jParser.makeHttpRequest(url_get_order_comments,					"GET", params1);			// Check your log cat for JSON reponse			Log.d("All comments: ", json.toString());			try {				// Checking for SUCCESS TAG				int success = json.getInt(TAG_SUCCESS);				AllCommentsList.clear();				if (success == 1) {					// item/s found					// Getting Array of comments					AllOrderComments = json.getJSONArray(TAG_ALL_COMMENTS);					AllCommentsList.clear();					// Log.e("ghabl az", "for");					// looping through All Products					for (int i = 0; i < AllOrderComments.length(); i++) {						JSONObject c = AllOrderComments.getJSONObject(i);						HashMap<String, String> map = new HashMap<String, String>();						// Storing each json item in variable						// String strOrderId = c.getString(TAG_ORDER_ID);						String strCommentId = c.getString(TAG_COMMENT_ID);						String strShop = c.getString(TAG_SHOP);						String strPainter = c.getString(TAG_PAINTER);						String strComment = c.getString(TAG_COMMENT);						String strDateTime = c.getString(TAG_DATETIME);						String strSeen = c.getString(TAG_SEEN);						String strCommentID = c.getString(TAG_COMMENT_ID);						if (strPainter.equals("null")) {							strPainter = "";						}						if (strShop.equals("null")) {							strShop = "";						} else {							String[] parts = strShop.split(" ");							strShop = parts[0] + " " + parts[1] + "...";						}						if (!strShop.equals("")) { // agar comment marboot be													// shop hast							map.put(TAG_SHOP, "<<" + strShop);							if (strSeen.equals("0")) { // agar comment e marboot														// be shop dide nashode														// ta hala								new SetSeenComment().execute(strCommentID);							}						}						if (!strPainter.equals("")) {							map.put(TAG_PAINTER, strPainter + ">>");						}						map.put(TAG_COMMENT_ID, strCommentId);						map.put(TAG_COMMENT, strComment);						map.put(TAG_DATETIME, strDateTime);						// adding HashList to ArrayList						AllCommentsList.add(map);						// Log.e("daakhele for i =", String.valueOf(i));					}				}			} catch (JSONException e) {				e.printStackTrace();			}			return null;		}		protected void onPostExecute(String file_url) {			imgLoadComments.setVisibility(View.VISIBLE);			ProgressBarLoadComments.setVisibility(View.INVISIBLE);			ProgressBarLoadAllComments.setVisibility(View.INVISIBLE);			runOnUiThread(new Runnable() {				public void run() {					if (!AllCommentsList.isEmpty()) {						adapter = new SimpleAdapter(getApplicationContext(),								AllCommentsList,								R.layout.list_row_order_comments, new String[] {										TAG_COMMENT_ID, TAG_SHOP, TAG_PAINTER,										TAG_COMMENT, TAG_DATETIME }, new int[] {										R.id.tvIdComments, R.id.tvShopSender,										R.id.tvPainterSender, R.id.tvComment,										R.id.tvDateTimeComments });						listViewComment.setAdapter(adapter);						listViewComment.setSelection(listViewComment								.getAdapter().getCount() - 1);					}				}			});			boolRun = true; // azad shodane asynctask bad az payan e amaliat		}	}	class SetSeenComment extends AsyncTask<String, String, String> {		@Override		protected String doInBackground(String... params) {			String CommentID = params[0];			List<NameValuePair> params1 = new ArrayList<NameValuePair>();			params1.add(new BasicNameValuePair("comment_id", CommentID));			try {				jParser.makeHttpRequest(url_seen_comment, "GET", params1);			} catch (Exception e) {				e.printStackTrace();			}			return null;		}	}	class AddComment extends AsyncTask<String, String, String> {		@Override		protected void onPreExecute() {			super.onPreExecute();			boolRun = false;		}		@Override		protected String doInBackground(String... params) {			int success = 0;			try {				List<NameValuePair> params1 = new ArrayList<NameValuePair>();				Date dt = new Date();				String strDate = (String) DateFormat.format(						"yyyy-MM-dd k:mm:ss", dt.getTime());				params1.add(new BasicNameValuePair("order_id", strOrderId));				params1.add(new BasicNameValuePair("sender_email", Global.Email));				// Comment Handler				// if....				params1.add(new BasicNameValuePair("comment", etSendComment						.getText().toString().trim()));				params1.add(new BasicNameValuePair("date_time", strDate));				// Log.e("ID", strOrderId);				// Log.e("email", Global.Email);				// Log.e("comment", etSendComment.getText().toString().trim());				// Log.e("date", strDate);				// getting JSON string from URL				JSONObject json1 = null;				json1 = jParser						.makeHttpRequest(url_add_comment, "GET", params1);				// Check your log cat for JSON reponse				Log.d("Update status: ", json1.toString());				success = json1.getInt(TAG_SUCCESS);				Log.d("Success: ", "done");				if (success == 1 && json1 != null) {					runOnUiThread(new Runnable() {						public void run() {//							((BaseAdapter) adapter).notifyDataSetChanged();														Toast.makeText(OrderCommentsActivity.this,									"Comment Saved.", Toast.LENGTH_SHORT)									.show();							etSendComment.setText("");						}					});				} else {					Log.d("Error: ", "null");					Toast.makeText(OrderCommentsActivity.this,							"Error in saving comment!\nPlease try again.",							Toast.LENGTH_SHORT).show();				}			} catch (JSONException e) {				e.printStackTrace();				Log.d("Error: ", "catch");				Toast.makeText(OrderCommentsActivity.this,						"Error in saving comment!\nPlease try again.",						Toast.LENGTH_SHORT).show();			}			new LoadAllComments().execute();			return null;		}	}	@Override	public void onClick(View v) {		if (v.getId() == R.id.btnSendComment) {			// CHECK INTERNET CONNECTION			ConnectionDetector cd = new ConnectionDetector(					getApplicationContext());			Boolean internetIsPresent = cd.isConnectingToInternet();			if (!internetIsPresent) {				showAlertDialog(this, "No Internet Connection !",						"You need internet connection to send comment.", false);				// END OF CHECK INTERNET CONNECTION			} else {				if (!etSendComment.getText().toString().trim().equals("")) {					Toast.makeText(OrderCommentsActivity.this,							"Trying to save comment. Please Wait...",							Toast.LENGTH_LONG).show();					new AddComment().execute();					// this.finish(); //					// ******************************************** bastane					// activity bad az send. felan timer dare aziat mikone.				}			}		}else if(v.getId() == R.id.imgRetryLoadComment){			imgLoadComments.setVisibility(View.INVISIBLE);			ProgressBarLoadComments.setVisibility(View.VISIBLE);			new LoadAllComments().execute();		}	}	public void showAlertDialog(Context context, String title, String message,			Boolean status) {		AlertDialog alertDialog = new AlertDialog.Builder(context).create();		// Setting Dialog Title		alertDialog.setTitle(title);		// Setting Dialog Message		alertDialog.setMessage(message);		// Setting alert dialog icon		alertDialog.setIcon((status) ? R.drawable.green : R.drawable.red);		// Setting OK Button		alertDialog.setButton("OK", new DialogInterface.OnClickListener() {			public void onClick(DialogInterface dialog, int which) {			}		});		// Showing Alert Message		alertDialog.show();	};	public void doAsyncTaskPeriodically() {		final Timer timer = new Timer();		final Handler handler = new Handler();		timerTask = new TimerTask() {			@Override			public void run() {				handler.post(new Runnable() {					public void run() {						try {							if (Global.timerTaskComment) {								Log.e("boolRun", boolRun.toString());								if (boolRun) {									LoadAllComments LAC = new LoadAllComments();									LAC.execute();								}							} else {								timerTask.cancel();								timerTask = null;								timer.cancel();							}							// ((BaseAdapter) adapter).notifyDataSetChanged();						} catch (Exception e) {						}					}				});			}		};		timer.schedule(timerTask, 0, 15000);	}	@Override	protected void onStop() {		super.onStop();		Global.timerTaskComment = false;		// timerTask.cancel();		// timer.cancel();		Log.e("Stop", "Done");	}	@Override	protected void onPause() {		super.onPause();		Global.timerTaskComment = false;		// timerTask.cancel();		// timer.cancel();		Log.e("Pause", "Done");	}	// @Override	// protected void onDestroy() {	// super.onDestroy();	// timer.cancel();	// Log.e("Destroy", "Done");	// }	@Override	protected void onResume() {		super.onResume();		Global.timerTaskComment = true;		boolRun = true;		doAsyncTaskPeriodically();		Log.e("Resume", "Done");	}}